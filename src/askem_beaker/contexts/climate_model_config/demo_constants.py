# -*- coding: utf-8 -*-
demo_model_name='WRF'
demo_model_description="""3-D baroclinic waves which includes by default a  

 - Baroclinically unstable jet u(y,z) on an f-plane
 - Symmetric north and south, periodic east and west boundaries
 - 100-km grid size, 16-km top, with 4-km damping layer
 - 41x81 points in (x,y), 64 layers"""
demo_model_name='em_b_wave'
demo_functions=['def answer(original_text,\nrun_days,\nrun_hours,\nrun_minutes,\nrun_seconds,\nstart_year,\nstart_month,\nstart_day,\nstart_hour,\nstart_minute,\nstart_second):\n    updated_text = original_text.replace("run_days                            = 5,", f"run_days                            = {run_days},") \\\n                                .replace("run_hours                           = 0,", f"run_hours                           = {run_hours},") \\\n                                .replace("run_minutes                         = 0,", f"run_minutes                         = {run_minutes},") \\\n                                .replace("run_seconds                         = 0,", f"run_seconds                         = {run_seconds},") \\\n                                .replace("start_year                          = 0001, 0001, 0001,", f"start_year                          = {start_year}, {start_year}, {start_year},") \\\n                                .replace("start_month                         = 01,   01,   01,", f"start_month                         = {start_month},   {start_month},   {start_month},") \\\n                                .replace("start_day                           = 01,   01,   01,", f"start_day                           = {start_day},   {start_day},   {start_day},") \\\n                                .replace("start_hour                          = 00,   00,   00,", f"start_hour                          = {start_hour},   {start_hour},   {start_hour},") \\\n                                .replace("start_minute                        = 00,   00,   00,", f"start_minute                        = {start_minute},   {start_minute},   {start_minute},") \\\n                                .replace("start_second                        = 00,   00,   00,", f"start_second                        = {start_second},   {start_second},   {start_second},")\n    return updated_text', "def answer(original_text,\n           symmetric_ye,\n           open_ys,\n           open_ye,\n           nio_tasks_per_group,\n           nio_groups,\n           ideal_case):\n    updated_text = original_text.replace('symmetric_ye                        = .true.,', f'symmetric_ye                        = {symmetric_ye},')\n    updated_text = updated_text.replace('open_ys                             = .false.,', f'open_ys                             = {open_ys},')\n    updated_text = updated_text.replace('open_ye                             = .false.,', f'open_ye                             = {open_ye},')\n    updated_text = updated_text.replace('nio_tasks_per_group = 0,', f'nio_tasks_per_group = {nio_tasks_per_group},')\n    updated_text = updated_text.replace('nio_groups = 1,', f'nio_groups = {nio_groups},')\n    updated_text = updated_text.replace('ideal_case = 7', f'ideal_case = {ideal_case}')\n    return updated_text", "def answer(original_text,\ns_sn,\ne_sn,\ns_vert,\ne_vert,\ndx,\ndy,\nztop,\ngrid_id,\nparent_id,\ni_parent_start):\n    return original_text.replace('s_sn                                = 1,     1,     1,', f's_sn                                = {s_sn},     {s_sn},     {s_sn},').replace('e_sn                                = 81,    81,    81,', f'e_sn                                = {e_sn},    {e_sn},    {e_sn},').replace('s_vert                              = 1,     1,     1,', f's_vert                              = {s_vert},     {s_vert},     {s_vert},').replace('e_vert                              = 65,    65,    65,', f'e_vert                              = {e_vert},    {e_vert},    {e_vert},').replace('dx                                  = 100000,', f'dx                                  = {dx},').replace('dy                                  = 100000,', f'dy                                  = {dy},').replace('ztop                                = 16000, 16000, 16000,', f'ztop                                = {ztop}, {ztop}, {ztop},').replace('grid_id                             = 1,     2,     3,', f'grid_id                             = {grid_id},     {grid_id + 1},     {grid_id + 2},').replace('parent_id                           = 0,     1,     2,', f'parent_id                           = {parent_id},     {parent_id + 1},     {parent_id + 2},').replace('i_parent_start                      = 0,     17,    17,', f'i_parent_start                      = {i_parent_start},     {i_parent_start + 17},    {i_parent_start + 17},')", 'def answer(original_text,\n           j_parent_start,\n           parent_grid_ratio,\n           parent_time_step_ratio,\n           feedback,\n           smooth_option,\n           mp_physics,\n           ra_lw_physics,\n           ra_sw_physics,\n           radt,\n           sf_sfclay_physics):\n    \n    modified_text = original_text.replace("j_parent_start                      = 0,     33,    33",\n                                          f"j_parent_start                      = 0,     {j_parent_start},    {j_parent_start}")\n    modified_text = modified_text.replace("parent_grid_ratio                   = 1,     5,     5",\n                                          f"parent_grid_ratio                   = 1,     {parent_grid_ratio},     {parent_grid_ratio}")\n    modified_text = modified_text.replace("parent_time_step_ratio              = 1,     5,     5",\n                                          f"parent_time_step_ratio              = 1,     {parent_time_step_ratio},     {parent_time_step_ratio}")\n    modified_text = modified_text.replace("feedback                            = 1",\n                                          f"feedback                            = {feedback}")\n    modified_text = modified_text.replace("smooth_option                       = 0",\n                                          f"smooth_option                       = {smooth_option}")\n    modified_text = modified_text.replace("mp_physics                          = 0,     0,     0",\n                                          f"mp_physics                          = {mp_physics},     {mp_physics},     {mp_physics}")\n    modified_text = modified_text.replace("ra_lw_physics                       = 0,     0,     0",\n                                          f"ra_lw_physics                       = {ra_lw_physics},     {ra_lw_physics},     {ra_lw_physics}")\n    modified_text = modified_text.replace("ra_sw_physics                       = 0,     0,     0",\n                                          f"ra_sw_physics                       = {ra_sw_physics},     {ra_sw_physics},     {ra_sw_physics}")\n    modified_text = modified_text.replace("radt                                = 30,    30,    30",\n                                          f"radt                                = {radt},    {radt},    {radt}")\n    modified_text = modified_text.replace("sf_sfclay_physics                   = 0,     0,     0",\n                                          f"sf_sfclay_physics                   = {sf_sfclay_physics},     {sf_sfclay_physics},     {sf_sfclay_physics}")\n    \n    return modified_text', "def answer(original_text,\nh_sca_adv_order,\nv_sca_adv_order,\nnon_hydrostatic,\nperiodic_x,\nsymmetric_xs,\nsymmetric_xe,\nopen_xs,\nopen_xe,\nperiodic_y,\nsymmetric_ys):\n    modified_text = original_text.replace('h_sca_adv_order                     = 5,      5,      5,',\n                                         f'h_sca_adv_order                     = {h_sca_adv_order},      {h_sca_adv_order},      {h_sca_adv_order},')\n    modified_text = modified_text.replace('v_sca_adv_order                     = 3,      3,      3,',\n                                         f'v_sca_adv_order                     = {v_sca_adv_order},      {v_sca_adv_order},      {v_sca_adv_order},')\n    modified_text = modified_text.replace('non_hydrostatic                     = .true., .true., .true.,',\n                                         f'non_hydrostatic                     = {non_hydrostatic}, {non_hydrostatic}, {non_hydrostatic},')\n    modified_text = modified_text.replace('periodic_x                          = .true., ',\n                                         f'periodic_x                          = {periodic_x}, ')\n    modified_text = modified_text.replace('symmetric_xs                        = .false.,',\n                                         f'symmetric_xs                        = {symmetric_xs},')\n    modified_text = modified_text.replace('symmetric_xe                        = .false.,',\n                                         f'symmetric_xe                        = {symmetric_xe},')\n    modified_text = modified_text.replace('open_xs                             = .false.,',\n                                         f'open_xs                             = {open_xs},')\n    modified_text = modified_text.replace('open_xe                             = .false.,',\n                                         f'open_xe                             = {open_xe},')\n    modified_text = modified_text.replace('periodic_y                          = .false.,',\n                                         f'periodic_y                          = {periodic_y},')\n    modified_text = modified_text.replace('symmetric_ys                        = .true., ',\n                                         f'symmetric_ys                        = {symmetric_ys}, ')\n    return modified_text", "def answer(original_text,\n           sf_surface_physics,\n           bl_pbl_physics,\n           bldt,\n           cu_physics,\n           cudt,\n           hybrid_opt,\n           rk_ord,\n           diff_opt,\n           km_opt,\n           damp_opt):\n    return original_text.replace(\n        'sf_surface_physics                   = 0,     0,     0,',\n        f'sf_surface_physics                   = {sf_surface_physics},     {sf_surface_physics},     {sf_surface_physics},'\n    ).replace(\n        'bl_pbl_physics                      = 0,     0,     0,',\n        f'bl_pbl_physics                      = {bl_pbl_physics},     {bl_pbl_physics},     {bl_pbl_physics},'\n    ).replace(\n        'bldt                                = 0,     0,     0,',\n        f'bldt                                = {bldt},     {bldt},     {bldt},'\n    ).replace(\n        'cu_physics                          = 0,     0,     0,',\n        f'cu_physics                          = {cu_physics},     {cu_physics},     {cu_physics},'\n    ).replace(\n        'cudt                                = 5,     5,     5,',\n        f'cudt                                = {cudt},     {cudt},     {cudt},'\n    ).replace(\n        'hybrid_opt                          = 0,',\n        f'hybrid_opt                          = {hybrid_opt},'\n    ).replace(\n        'rk_ord                              = 3,',\n        f'rk_ord                              = {rk_ord},'\n    ).replace(\n        'diff_opt                            = 1,      1,      1,',\n        f'diff_opt                            = {diff_opt},      {diff_opt},      {diff_opt},'\n    ).replace(\n        'km_opt                              = 1,      1,      1,',\n        f'km_opt                              = {km_opt},      {km_opt},      {km_opt},'\n    ).replace(\n        'damp_opt                            = 0,',\n        f'damp_opt                            = {damp_opt},'\n    )", "def answer(original_text,\nio_form_history,\nio_form_restart,\nio_form_input,\nio_form_boundary,\ntime_step,\ntime_step_fract_num,\ntime_step_fract_den,\nmax_dom,\ns_we,\ne_we):\n    return original_text.replace('io_form_history                     = 2','io_form_history                     = {}'.format(io_form_history)).replace('io_form_restart                     = 2','io_form_restart                     = {}'.format(io_form_restart)).replace('io_form_input                       = 2','io_form_input                       = {}'.format(io_form_input)).replace('io_form_boundary                    = 2','io_form_boundary                    = {}'.format(io_form_boundary)).replace('time_step                           = 600,','time_step                           = {},'.format(time_step)).replace('time_step_fract_num                 = 0,','time_step_fract_num                 = {},'.format(time_step_fract_num)).replace('time_step_fract_den                 = 1,','time_step_fract_den                 = {},'.format(time_step_fract_den)).replace('max_dom                             = 1,','max_dom                             = {},'.format(max_dom)).replace('s_we                                = 1,     1,     1,','s_we                                = {},     {},     {},'.format(s_we, s_we, s_we)).replace('e_we                                = 41,    41,    41,','e_we                                = {},    {},    {},'.format(e_we, e_we, e_we))", 'def answer(original_text, end_year, end_month, end_day, end_hour, end_minute, end_second, history_interval, frames_per_outfile, restart, restart_interval):\n    return original_text.replace(\n        "end_year                            = 0001, 0001, 0001",\n        f"end_year                            = {end_year}, {end_year}, {end_year}"\n    ).replace(\n        "end_month                           = 01,   01,   01",\n        f"end_month                           = {end_month},   {end_month},   {end_month}"\n    ).replace(\n        "end_day                             = 05,   05,   05",\n        f"end_day                             = {end_day},   {end_day},   {end_day}"\n    ).replace(\n        "end_hour                            = 00,   00,   00",\n        f"end_hour                            = {end_hour},   {end_hour},   {end_hour}"\n    ).replace(\n        "end_minute                          = 00,   00,   00",\n        f"end_minute                          = {end_minute},   {end_minute},   {end_minute}"\n    ).replace(\n        "end_second                          = 00,   00,   00",\n        f"end_second                          = {end_second},   {end_second},   {end_second}"\n    ).replace(\n        "history_interval                    = 360,  360,  360",\n        f"history_interval                    = {history_interval},  {history_interval},  {history_interval}"\n    ).replace(\n        "frames_per_outfile                  = 1000, 1000, 1000",\n        f"frames_per_outfile                  = {frames_per_outfile}, {frames_per_outfile}, {frames_per_outfile}"\n    ).replace(\n        "restart                             = .false.",\n        f"restart                             = {restart}"\n    ).replace(\n        "restart_interval                    = 3600",\n        f"restart_interval                    = {restart_interval}"\n    )', "def answer(original_text,\nzdamp,\ndampcoef,\nkhdif,\nkvdif,\nsmdiv,\nemdiv,\nepssm,\ntime_step_sound,\nh_mom_adv_order,\nv_mom_adv_order):\n    return original_text.replace('zdamp                               = 4000.,  4000.,  4000.,', f'zdamp                               = {zdamp},  {zdamp},  {zdamp},').replace('dampcoef                            = 0.01,   0.01,   0.01', f'dampcoef                            = {dampcoef},   {dampcoef},   {dampcoef}').replace('khdif                               = 0,      0,      0,', f'khdif                               = {khdif},      {khdif},      {khdif},').replace('kvdif                               = 0,      0,      0,', f'kvdif                               = {kvdif},      {kvdif},      {kvdif},').replace('smdiv                               = 0.1,    0.1,    0.1,', f'smdiv                               = {smdiv},    {smdiv},    {smdiv},').replace('emdiv                               = 0.01,   0.01,   0.01,', f'emdiv                               = {emdiv},   {emdiv},   {emdiv},').replace('epssm                               = 0.1,    0.1,    0.1', f'epssm                               = {epssm},    {epssm},    {epssm}').replace('time_step_sound                     = 4,      4,      4,', f'time_step_sound                     = {time_step_sound},      {time_step_sound},      {time_step_sound},').replace('h_mom_adv_order                     = 5,      5,      5,', f'h_mom_adv_order                     = {h_mom_adv_order},      {h_mom_adv_order},      {h_mom_adv_order},').replace('v_mom_adv_order                     = 3,      3,      3,', f'v_mom_adv_order                     = {v_mom_adv_order},      {v_mom_adv_order},      {v_mom_adv_order},')"]
demo_library_description="""The WRF code library's purpose is performing ocean simulations."""
demo_library_name='WRF'
model_configuration_information={'io_form_history': {'type': 'int',
  'default': 2,
  'description': 'I/O format of history files',
  'options': 'Integers (For example: 1 for WRF format, 2 for another supported format)'},
 'io_form_restart': {'type': 'int',
  'default': 2,
  'description': 'I/O format of restart files',
  'options': 'Integers (For example: 1 for WRF format, 2 for another supported format)'},
 'io_form_input': {'type': 'int',
  'default': 2,
  'description': 'I/O format of input files',
  'options': 'Integers (For example: 1 for WRF format, 2 for another supported format)'},
 'io_form_boundary': {'type': 'int',
  'default': 2,
  'description': 'I/O format of boundary files',
  'options': 'Integers (For example: 1 for WRF format, 2 for another supported format)'},
 'time_step': {'type': 'int',
  'default': 600,
  'description': 'Time step size in seconds',
  'options': 'Positive integers, usually several factors of model resolution'},
 'time_step_fract_num': {'type': 'int',
  'default': 0,
  'description': 'Fractional numerator for time step size',
  'options': 'Non-negative integers, used for more precise time stepping'},
 'time_step_fract_den': {'type': 'int',
  'default': 1,
  'description': 'Fractional denominator for time step size',
  'options': 'Positive integers, used for more precise time stepping'},
 'max_dom': {'type': 'int',
  'default': 1,
  'description': 'Number of domains',
  'options': 'Positive integers, typically 1 for single domain or higher for nested domains'},
 's_we': {'type': 'int',
  'default': 1,
  'description': 'Start index for west-east direction on the domain grid',
  'options': 'Positive integers'},
 'e_we': {'type': 'int',
  'default': 41,
  'description': 'End index for west-east direction on the domain grid',
  'options': 'Positive integers, greater than s_we'},
 'end_year': {'type': 'int',
  'default': 1,
  'description': 'Specifies the ending year for the simulation.',
  'options': 'Any positive integer representing a year. Commonly within a range close to the current year.'},
 'end_month': {'type': 'int',
  'default': 1,
  'description': 'Specifies the ending month for the simulation.',
  'options': 'Integer from 1 to 12 representing months of the year.'},
 'end_day': {'type': 'int',
  'default': 5,
  'description': 'Specifies the ending day for the simulation.',
  'options': 'Integer from 1 to 31 representing days of the month, adjusted for the specific month and year.'},
 'end_hour': {'type': 'int',
  'default': 0,
  'description': 'Specifies the ending hour for the simulation.',
  'options': 'Integer from 0 to 23 representing hours of the day.'},
 'end_minute': {'type': 'int',
  'default': 0,
  'description': 'Specifies the ending minute for the simulation.',
  'options': 'Integer from 0 to 59 representing minutes of an hour.'},
 'end_second': {'type': 'int',
  'default': 0,
  'description': 'Specifies the ending second for the simulation.',
  'options': 'Integer from 0 to 59 representing seconds of a minute.'},
 'history_interval': {'type': 'int',
  'default': 360,
  'description': 'Defines the interval, in simulation minutes, for writing data to the history file.',
  'options': 'Positive integers typically representing the interval in minutes (or another time unit, according to the context).'},
 'frames_per_outfile': {'type': 'int',
  'default': 1000,
  'description': 'Sets the number of frames to write out to each output file.',
  'options': 'Any positive integer, with larger values resulting in fewer, larger files.'},
 'restart': {'type': 'bool',
  'default': '.false.',
  'description': 'Determines whether the simulation is a restart from a previously saved run state.',
  'options': 'Boolean value either .true. or .false. represents if the restart functionality is enabled or not.'},
 'restart_interval': {'type': 'int',
  'default': 3600,
  'description': 'Specifies the interval, in simulation seconds, at which restart files are written.',
  'options': 'Positive integers typically representing the interval in seconds (or another time unit if so configured).'},
 'run_days': {'type': 'int',
  'default': 5,
  'description': 'The number of days the program will run.',
  'options': 'Non-negative integers'},
 'run_hours': {'type': 'int',
  'default': 0,
  'description': 'The number of hours the program will run, in addition to the run_days setting.',
  'options': 'Non-negative integers (usually 0 to 23)'},
 'run_minutes': {'type': 'int',
  'default': 0,
  'description': 'The number of minutes the program will run, in addition to the run_days and run_hours settings.',
  'options': 'Non-negative integers (usually 0 to 59)'},
 'run_seconds': {'type': 'int',
  'default': 0,
  'description': 'The number of seconds the program will run, in addition to the run_days, run_hours, and run_minutes settings.',
  'options': 'Non-negative integers (usually 0 to 59)'},
 'start_year': {'type': 'int',
  'default': 1,
  'description': "The start year for the program's run.",
  'options': 'Positive integers'},
 'start_month': {'type': 'int',
  'default': 1,
  'description': "The start month for the program's run.",
  'options': 'Positive integers (usually 1 to 12)'},
 'start_day': {'type': 'int',
  'default': 1,
  'description': "The start day for the program's run.",
  'options': 'Positive integers (usually 1 to the number of days in the specified month)'},
 'start_hour': {'type': 'int',
  'default': 0,
  'description': "The start hour for the program's run.",
  'options': 'Non-negative integers (usually 0 to 23)'},
 'start_minute': {'type': 'int',
  'default': 0,
  'description': "The start minute for the program's run.",
  'options': 'Non-negative integers (usually 0 to 59)'},
 'start_second': {'type': 'int',
  'default': 0,
  'description': "The start second for the program's run.",
  'options': 'Non-negative integers (usually 0 to 59)'},
 'h_sca_adv_order': {'type': 'int',
  'default': 5,
  'description': 'Horizontal scalar advection order.',
  'options': 'Positive integers commonly from 1 to 6.'},
 'v_sca_adv_order': {'type': 'int',
  'default': 3,
  'description': 'Vertical scalar advection order.',
  'options': 'Positive integers commonly from 1 to 3.'},
 'non_hydrostatic': {'type': 'bool',
  'default': True,
  'description': 'Flag to enable non-hydrostatic dynamics.',
  'options': 'Boolean value either true or false.'},
 'periodic_x': {'type': 'bool',
  'default': True,
  'description': 'Flag for periodic boundary conditions in the west-east direction.',
  'options': 'Boolean value either true or false.'},
 'symmetric_xs': {'type': 'bool',
  'default': False,
  'description': 'Flag for symmetric boundary conditions at the start of the x-domain.',
  'options': 'Boolean value either true or false.'},
 'symmetric_xe': {'type': 'bool',
  'default': False,
  'description': 'Flag for symmetric boundary conditions at the end of the x-domain.',
  'options': 'Boolean value either true or false.'},
 'open_xs': {'type': 'bool',
  'default': False,
  'description': 'Flag for open boundary conditions at the start of the x-domain.',
  'options': 'Boolean value either true or false.'},
 'open_xe': {'type': 'bool',
  'default': False,
  'description': 'Flag for open boundary conditions at the end of the x-domain.',
  'options': 'Boolean value either true or false.'},
 'periodic_y': {'type': 'bool',
  'default': False,
  'description': 'Flag for periodic boundary conditions in the north-south direction.',
  'options': 'Boolean value either true or false.'},
 'symmetric_ys': {'type': 'bool',
  'default': True,
  'description': 'Flag for symmetric boundary conditions at the start of the y-domain.',
  'options': 'Boolean value either true or false.'},
 's_sn': {'type': 'int',
  'default': 1,
  'description': 'The start index for the south-north direction of the grid',
  'options': 'Positive integers, typically starting from 1'},
 'e_sn': {'type': 'int',
  'default': 81,
  'description': 'The end index for the south-north direction of the grid',
  'options': 'Positive integers, should be greater than s_sn'},
 's_vert': {'type': 'int',
  'default': 1,
  'description': 'The start index for the vertical (z) direction of the grid',
  'options': 'Positive integers, typically starting from 1'},
 'e_vert': {'type': 'int',
  'default': 65,
  'description': 'The end index for the vertical (z) direction of the grid',
  'options': 'Positive integers, should be greater than s_vert'},
 'dx': {'type': 'int',
  'default': 100000,
  'description': 'Grid spacing in the west-east direction in meters',
  'options': 'Positive integers representing meters'},
 'dy': {'type': 'int',
  'default': 100000,
  'description': 'Grid spacing in the south-north direction in meters',
  'options': 'Positive integers representing meters'},
 'ztop': {'type': 'int',
  'default': 16000,
  'description': 'The top of the model domain in meters',
  'options': 'Positive integers representing meters'},
 'grid_id': {'type': 'int',
  'default': 1,
  'description': 'Identifier for the grid domain',
  'options': 'Positive integers, typically starting from 1'},
 'parent_id': {'type': 'int',
  'default': 0,
  'description': 'Identifier for the parent grid domain',
  'options': 'Non-negative integers, 0 for the top-most domain'},
 'i_parent_start': {'type': 'int',
  'default': 0,
  'description': 'The start index of the current grid in the i-direction of the parent grid',
  'options': 'Non-negative integers'},
 'sf_surface_physics': {'type': 'int',
  'default': 0,
  'description': 'Surface physics scheme option',
  'options': 'Integer selecting a specific surface layer physics scheme (e.g., 0 for no physics, 1 for a specific scheme, etc.)'},
 'bl_pbl_physics': {'type': 'int',
  'default': 0,
  'description': 'Boundary layer physics scheme option',
  'options': 'Integer selecting a specific planetary boundary layer physics scheme (e.g., 0 for no PBL scheme, 1 for a specific scheme, etc.)'},
 'bldt': {'type': 'int',
  'default': 0,
  'description': 'Frequency (in minutes) for calling boundary layer physics scheme',
  'options': 'Positive integer specifying call frequency, typically the same as model time step or greater'},
 'cu_physics': {'type': 'int',
  'default': 0,
  'description': 'Cumulus parameterization physics scheme option',
  'options': 'Integer selecting cumulus parameterization scheme (e.g., 0 for no cumulus parameterization, 1 for a specific scheme, etc.)'},
 'cudt': {'type': 'int',
  'default': 5,
  'description': 'Frequency (in minutes) for calling cumulus parameterization scheme',
  'options': 'Positive integer, often larger than the model time step'},
 'hybrid_opt': {'type': 'int',
  'default': 0,
  'description': 'Option to select hybrid vertical coordinate',
  'options': '0 for traditional sigma-levels, >0 for various hybrid options'},
 'rk_ord': {'type': 'int',
  'default': 3,
  'description': 'Order of the Runge-Kutta time integration scheme',
  'options': 'Typically 3 or 4, representing the order of accuracy'},
 'diff_opt': {'type': 'int',
  'default': 1,
  'description': 'Option to select diffusion scheme',
  'options': 'Integer selecting the diffusion scheme (1 for a specific option, etc.)'},
 'km_opt': {'type': 'int',
  'default': 1,
  'description': 'Option to select turbulent kinetic energy mixing',
  'options': 'Integer selecting the TKE mixing scheme (1 for a specific option, etc.)'},
 'damp_opt': {'type': 'int',
  'default': 0,
  'description': 'Damping option',
  'options': 'Integer representing the type of damping (e.g., 0 for no damping, 1 for Rayleigh damping, etc.)'},
 'symmetric_ye': {'type': 'boolean',
  'default': True,
  'description': 'Specifies whether the y-e boundary of the domain is symmetric.',
  'options': 'True or False'},
 'open_ys': {'type': 'boolean',
  'default': False,
  'description': 'Specifies whether the y-s boundary of the domain is open.',
  'options': 'True or False'},
 'open_ye': {'type': 'boolean',
  'default': False,
  'description': 'Specifies whether the y-e boundary of the domain is open.',
  'options': 'True or False'},
 'nio_tasks_per_group': {'type': 'int',
  'default': 0,
  'description': 'Defines the number of I/O tasks per group.',
  'options': 'Any non-negative integer.'},
 'nio_groups': {'type': 'int',
  'default': 1,
  'description': 'Defines the number of I/O groups.',
  'options': 'Any positive integer.'},
 'ideal_case': {'type': 'int',
  'default': 7,
  'description': 'Specifies the idealized test case to be used.',
  'options': 'Any positive integer representing a case number.'},
 'j_parent_start': {'type': 'int',
  'default': 33,
  'description': 'The south-north staggered grid start index for refinement patches on the parent grid.',
  'options': 'Non-negative integers, list size corresponds to the number of nested domains.'},
 'parent_grid_ratio': {'type': 'int',
  'default': 5,
  'description': 'The integer ratio of grid spacing between a nested grid and its parent grid.',
  'options': 'Positive integers, list size corresponds to the number of nested domains.'},
 'parent_time_step_ratio': {'type': 'int',
  'default': 5,
  'description': 'The integer ratio of time step duration between a nested grid and its parent grid.',
  'options': 'Positive integers, list size corresponds to the number of nested domains.'},
 'feedback': {'type': 'int',
  'default': 1,
  'description': 'Controls whether feedback from nested grids to their parent grids is allowed.',
  'options': '0 (feedback not allowed) or 1 (feedback allowed).'},
 'smooth_option': {'type': 'int',
  'default': 0,
  'description': 'Controls the application of smoothing to the nest grid interfaces.',
  'options': 'Typically 0 or a positive integer, with 0 meaning no smoothing.'},
 'mp_physics': {'type': 'list of int',
  'default': 0,
  'description': 'Defines the microphysics scheme used in the model for each domain.',
  'options': 'Non-negative integers where each number corresponds to a specific microphysics parameterization option.'},
 'ra_lw_physics': {'type': 'int',
  'default': 0,
  'description': 'Defines the long-wave radiation physics scheme used for each domain.',
  'options': 'Non-negative integers where each number corresponds to a specific long-wave radiation parameterization option.'},
 'ra_sw_physics': {'type': 'int',
  'default': 0,
  'description': 'Defines the short-wave radiation physics scheme used for each domain.',
  'options': 'Non-negative integers where each number corresponds to a specific short-wave radiation parameterization option.'},
 'radt': {'type': 'int',
  'default': 30,
  'description': 'Defines the radiation time step for each domain.',
  'options': 'Positive integers, representing the frequency in minutes at which radiation calculations are performed.'},
 'sf_sfclay_physics': {'type': 'int',
  'default': 0,
  'description': 'Defines the surface layer physics scheme used for each domain.',
  'options': 'Non-negative integers where each number corresponds to a specific surface layer physics option.'},
 'zdamp': {'type': 'float',
  'default': 4000.0,
  'description': 'Damping depth for vertical velocity',
  'options': 'Any positive float value representing meters'},
 'dampcoef': {'type': 'float',
  'default': 0.01,
  'description': 'Coefficient for the physical damping of the vertical velocity',
  'options': 'Any positive float usually between 0 and 1'},
 'khdif': {'type': 'int',
  'default': 0,
  'description': 'Horizontal diffusion option',
  'options': 'Non-negative integers where common values are 0 (no diffusion), 1 (smagorinsky diffusion), etc.'},
 'kvdif': {'type': 'int',
  'default': 0,
  'description': 'Vertical diffusion option',
  'options': 'Non-negative integers where common values are 0 (no diffusion), 1 (smagorinsky diffusion), etc.'},
 'smdiv': {'type': 'float',
  'default': 0.1,
  'description': 'Divergence damping in the model',
  'options': 'Any non-negative float value, commonly less than 1'},
 'emdiv': {'type': 'float',
  'default': 0.01,
  'description': 'Divergence damping coefficient for explicit moisture',
  'options': 'Any non-negative float value, usually between 0 and 1'},
 'epssm': {'type': 'float',
  'default': 0.1,
  'description': 'Fraction of the timestep when positive definite advection is used for scalars',
  'options': 'Any non-negative float value, usually between 0 and 1'},
 'time_step_sound': {'type': 'int',
  'default': 4,
  'description': 'Ratio of the model time step to the sound wave time step',
  'options': 'Positive integer values, often a divisor of model time step'},
 'h_mom_adv_order': {'type': 'int',
  'default': 5,
  'description': 'Order of the advection scheme for horizontal momentum',
  'options': 'Positive integers, common values include 2, 3, 4, 5, 6, where higher values indicate higher-order schemes'},
 'v_mom_adv_order': {'type': 'int',
  'default': 3,
  'description': 'Order of the advection scheme for vertical momentum',
  'options': 'Positive integers, common values include 2, 3, where higher values indicate higher-order schemes'}}

default_model_configuration={key:model_configuration_information[key]['default'] for key in model_configuration_information}
demo_code_dir='/media/hdd/Code/Build_WRF'
demo_run_command=f'cd {demo_code_dir}/WRF/test/em_b_wave;./ideal.exe > ideal.log;./wrf.exe > wrf.log;'
demo_config_text="""&time_control
 run_days                            = 5,
 run_hours                           = 0,
 run_minutes                         = 0,
 run_seconds                         = 0,
 start_year                          = 0001, 0001, 0001,
 start_month                         = 01,   01,   01,
 start_day                           = 01,   01,   01,
 start_hour                          = 00,   00,   00,
 start_minute                        = 00,   00,   00,
 start_second                        = 00,   00,   00,
 end_year                            = 0001, 0001, 0001,
 end_month                           = 01,   01,   01,
 end_day                             = 05,   05,   05,
 end_hour                            = 00,   00,   00,
 end_minute                          = 00,   00,   00,
 end_second                          = 00,   00,   00,
 history_interval                    = 360,  360,  360,
 frames_per_outfile                  = 1000, 1000, 1000,
 restart                             = .false.,
 restart_interval                    = 3600,
 io_form_history                     = 2
 io_form_restart                     = 2
 io_form_input                       = 2
 io_form_boundary                    = 2
 /

 &domains
 time_step                           = 600,
 time_step_fract_num                 = 0,
 time_step_fract_den                 = 1,
 max_dom                             = 1,
 s_we                                = 1,     1,     1,
 e_we                                = 41,    41,    41,
 s_sn                                = 1,     1,     1,
 e_sn                                = 81,    81,    81,
 s_vert                              = 1,     1,     1,
 e_vert                              = 65,    65,    65,
 dx                                  = 100000,
 dy                                  = 100000,
 ztop                                = 16000, 16000, 16000,
 grid_id                             = 1,     2,     3,
 parent_id                           = 0,     1,     2,
 i_parent_start                      = 0,     17,    17,
 j_parent_start                      = 0,     33,    33,
 parent_grid_ratio                   = 1,     5,     5,
 parent_time_step_ratio              = 1,     5,     5,
 feedback                            = 1,
 smooth_option                       = 0
 /

 &physics
 mp_physics                          = 0,     0,     0,
 ra_lw_physics                       = 0,     0,     0,
 ra_sw_physics                       = 0,     0,     0,
 radt                                = 30,    30,    30,
 sf_sfclay_physics                   = 0,     0,     0,
 sf_surface_physics                  = 0,     0,     0,
 bl_pbl_physics                      = 0,     0,     0,
 bldt                                = 0,     0,     0,
 cu_physics                          = 0,     0,     0,
 cudt                                = 5,     5,     5,
 /

 &fdda
 /

 &dynamics
 hybrid_opt                          = 0, 
 rk_ord                              = 3,
 diff_opt                            = 1,      1,      1,
 km_opt                              = 1,      1,      1,
 damp_opt                            = 0,
 zdamp                               = 4000.,  4000.,  4000.,
 dampcoef                            = 0.01,   0.01,   0.01
 khdif                               = 0,      0,      0,
 kvdif                               = 0,      0,      0,
 smdiv                               = 0.1,    0.1,    0.1,
 emdiv                               = 0.01,   0.01,   0.01,
 epssm                               = 0.1,    0.1,    0.1
 time_step_sound                     = 4,      4,      4,
 h_mom_adv_order                     = 5,      5,      5,
 v_mom_adv_order                     = 3,      3,      3,
 h_sca_adv_order                     = 5,      5,      5,
 v_sca_adv_order                     = 3,      3,      3,
 non_hydrostatic                     = .true., .true., .true.,
 /

 &bdy_control
 periodic_x                          = .true., 
 symmetric_xs                        = .false.,
 symmetric_xe                        = .false.,
 open_xs                             = .false.,
 open_xe                             = .false.,
 periodic_y                          = .false.,
 symmetric_ys                        = .true., 
 symmetric_ye                        = .true., 
 open_ys                             = .false.,
 open_ye                             = .false.,
 /

 &grib2
 /

 &namelist_quilt
 nio_tasks_per_group = 0,
 nio_groups = 1,
 /

 &ideal
 ideal_case = 7
 /"""

demo_config={'functions':demo_functions,
             'current_model_configuration':default_model_configuration,
             'model_description':demo_model_description,
             'library_description':demo_library_description,
             'variable_details':model_configuration_information,
             'library_name':demo_library_name,
             'model_name':demo_model_name,
             'config_text':demo_config_text,
             'run_command':demo_run_command}

